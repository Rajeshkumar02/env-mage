/**
 * Env-Mage - Typegen Command
 * Generate TypeScript type definitions from .env file
 */

import { readFile, fileExists, writeFile } from '../utils/fileUtils';
import { parseEnvContent } from '../utils/envParser';
import { logger } from '../utils/logger';
import { DEFAULTS } from '../utils/constants';
import { CommandResult } from '../types';

/**
 * Typegen options interface
 */
export interface TypegenOptions {
  env?: string;
  output?: string;
  format?: 'interface' | 'type' | 'const';
  strict?: boolean;
}

/**
 * Generate TypeScript types from .env file
 * @param options - Typegen configuration
 * @returns Command result with generated types
 */
export const typegenCommand = (options: TypegenOptions = {}): CommandResult => {
  try {
    const envFile = options.env || DEFAULTS.ENV_FILE;
    const outputFile = options.output || 'env.types.ts';
    const format = options.format || 'interface';
    const strict = options.strict ?? false;

    // Check if .env exists
    if (!fileExists(envFile)) {
      return {
        success: false,
        message: `File not found: ${envFile}`,
        error: new Error(`File not found: ${envFile}`),
      };
    }

    // Read and parse
    const content = readFile(envFile);
    const envObject = parseEnvContent(content);
    const keys = Object.keys(envObject);

    let typeDefinition: string;

    switch (format) {
      case 'type': {
        typeDefinition = generateTypeDefinition(keys, strict);
        break;
      }

      case 'const': {
        typeDefinition = generateConstDefinition(keys);
        break;
      }

      case 'interface':
      default: {
        typeDefinition = generateInterfaceDefinition(keys, strict);
        break;
      }
    }

    // Write to file
    writeFile(outputFile, typeDefinition);

    return {
      success: true,
      message: `âœ… Generated TypeScript types (${format}) with ${keys.length} keys`,
      data: {
        file: outputFile,
        format,
        keyCount: keys.length,
        keys,
      },
    };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error during typegen';
    return {
      success: false,
      message: `Typegen failed: ${message}`,
      error: error instanceof Error ? error : new Error(message),
    };
  }
};

/**
 * Generate interface definition
 */
function generateInterfaceDefinition(keys: string[], strict: boolean): string {
  const lines = [
    '/**',
    ' * Generated environment variables interface',
    ' * Auto-generated by Env-Mage',
    ' */',
    'export interface ProcessEnv {',
  ];

  for (const key of keys) {
    const type = strict ? 'string' : 'string | undefined';
    lines.push(`  ${key}: ${type};`);
  }

  lines.push('}');
  lines.push('');
  lines.push('declare global {');
  lines.push('  namespace NodeJS {');
  lines.push('    interface ProcessEnv extends ProcessEnv {}');
  lines.push('  }');
  lines.push('}');
  lines.push('');

  return lines.join('\n');
}

/**
 * Generate type definition
 */
function generateTypeDefinition(keys: string[], strict: boolean): string {
  const type = keys
    .map((key) => `  ${key}: ${strict ? 'string' : 'string | undefined'}`)
    .join(';\n');

  const lines = [
    '/**',
    ' * Generated environment variables type',
    ' * Auto-generated by Env-Mage',
    ' */',
    'export type ProcessEnv = {',
    type + ';',
    '};',
    '',
  ];

  return lines.join('\n');
}

/**
 * Generate const enum definition
 */
function generateConstDefinition(keys: string[]): string {
  const lines = [
    '/**',
    ' * Generated environment variable keys',
    ' * Auto-generated by Env-Mage',
    ' */',
    'export const ENV_KEYS = {',
  ];

  for (const key of keys) {
    lines.push(`  ${key}: '${key}' as const,`);
  }

  lines.push('} as const;');
  lines.push('');
  lines.push('export type EnvKey = typeof ENV_KEYS[keyof typeof ENV_KEYS];');
  lines.push('');

  return lines.join('\n');
}

/**
 * Async variant with logging
 */
export const runTypegenCommand = async (options: TypegenOptions = {}): Promise<CommandResult> => {
  logger.section('Generating TypeScript Types');
  logger.info(`Input: ${options.env || DEFAULTS.ENV_FILE}`);
  logger.info(`Output: ${options.output || 'env.types.ts'}`);
  logger.info(`Format: ${options.format || 'interface'}`);

  const result = typegenCommand(options);

  if (!result.success) {
    logger.error(result.message);
  }

  return result;
};
